---
- name: Configure homeworld server
  hosts: homeworld
  vars_files:
    - host_vars/homeworld/secrets.yml
    - host_vars/homeworld/packages.yml


  tasks:
    - name: Update apt cache
      become: true
      apt:
        update_cache: yes

    - name: Upgrade packages
      become: true
      apt:
        upgrade: safe
        autoremove: yes

    - name: Install packages
      become: true
      package:
        name: "{{ install_packages}}"
        state: present

    - name: 'install python packages'
      community.general.pipx:
        name: ansible-core # TODO: add for loop to iterate over a list of pipx packages stored in a host_var
        state: present

    - name: Check if just is installed
      stat:
        path: "/usr/local/bin/just"
      register: just_exists

    - name: Download just install script
      get_url:
        url: https://just.systems/install.sh
        dest: /tmp/install.sh
      when: just_exists.stat.exists == false

    - name: Make the script executable
      file:
        path: /tmp/install.sh
        mode: +x
      when: just_exists.stat.exists == false

    - name: Run just install script
      become: true
      command: /tmp/install.sh --to /usr/local/bin
      when: just_exists.stat.exists == false

    - name: Download lazydocker install script
      get_url:
        url: https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh
        dest: /tmp/install_lazydocker.sh

    - name: Make the script executable
      file:
        path: /tmp/install_lazydocker.sh
        mode: +x

    - name: Run lazydocker install script
      command: /tmp/install_lazydocker.sh

    - name: Install magic wormhole
      become: true
      get_url:
        url: https://github.com/magic-wormhole/magic-wormhole.rs/releases/download/0.6.0/wormhole-rs
        dest: /usr/local/bin/wormhole-rs
        mode: "a+x"

    - name: Check if SSH key exists
      stat:
        path: "~/.ssh/id_ed25519"
      register: ssh_key_exists

    - name: Generate SSH key if it doesn't exist
      command:
        cmd: ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ""
      when: ssh_key_exists.stat.exists == false

    - name: Read public key
      shell: cat ~/.ssh/id_ed25519.pub
      register: file_content
      when: ssh_key_exists.stat.exists == false

    - name: Print public key to terminal
      debug:
        msg: "{{ file_content.stdout }}"
      when: ssh_key_exists.stat.exists == false

    - name: 'Pause: add public key to GitHub'
      pause:
        prompt: "Press Enter to continue..."
      when: ssh_key_exists.stat.exists == false

    - name: Create ~/code folder
      file:
        path: ~/code
        state: directory

    - name: Check if ~/code/docker-compose exists
      stat:
        path: ~/code/docker-compose
      register: docker_compose_stat

    - name: Clone git repository
      git:
        repo: git@github.com:0xConnorRhodes/docker-compose.git
        dest: ~/code/docker-compose
        accept_hostkey: true
      when: docker_compose_stat.stat.exists == false

    - name: 'Create caddy_net Docker network'
      community.docker.docker_network:
        name: caddy_net
        state: present

    - name: 'Create proxmox user for web UI'
      become: true
      command: pveum useradd '{{ proxmox_user }}'@pve
      ignore_errors: true

    - name: Copy set-proxmox-pass script to server
      copy:
        src: configs/homeworld/set-proxmox-pass.sh
        dest: /tmp/set-proxmox-pass.sh
        mode: "a+x"

    - name: Execute script
      become: true
      command: /tmp/set-proxmox-pass.sh

    - name: Remove script
      file:
        path: /tmp/set-proxmox-pass.sh
        state: absent

    - name: 'set proxmox user permissions'
      become: true
      shell: |
        pveum aclmod / -user '{{ proxmox_user }}'@pve -role Administrator
        pveum aclmod / -user '{{ proxmox_user }}'@pve -role PVEAdmin
        pveum aclmod / -user '{{ proxmox_user }}'@pve -role PVEVMAdmin

    - name: 'copy nfs exports config'
      become: true
      copy:
        src: configs/homeworld/nfs-exports
        dest: /etc/exports
      notify:
        - Restart NFS service

    - name: 'clone my sysops-scripts'
      git:
        repo: https://github.com/0xConnorRhodes/sysops-scripts.git
        dest: ~/code/sysops-scripts
        version: main

    - name: 'switch repo to ssh access'
      replace:
        path: ~/code/sysops-scripts/.git/config
        regexp: '^(\s*url\s*=\s*)https://github.com/0xConnorRhodes/sysops-scripts.git$'
        replace: '\1git@github.com:0xConnorRhodes/sysops-scripts.git'

    - name: 'add podcast_convert.py to crontab'
      cron:
        name: "podcast_convert"
        minute: "30"
        hour: "*"
        job: "/home/{{ user }}/code/sysops-scripts/podcast_convert.py"

    - name: 'create sanoid directory'
      become: true
      file:
        path: /etc/sanoid
        state: directory

    - name: 'copy sanoid config'
      become: true
      copy:
        src: configs/homeworld/sanoid.conf
        dest: /etc/sanoid/sanoid.conf

    - name: Enable sanoid.timer
      become: true
      systemd:
        name: sanoid.timer
        state: started
        enabled: true

    - name: 'Firefly III cron transactions'
      cron:
        name: "Firefly III cron transactions"
        minute: "0"
        hour: "3"
        job: "/usr/bin/docker exec $(/usr/bin/docker container ls -a -f name=fireflyiii --format={% raw %}'{{.ID}}'{% endraw %}) /usr/local/bin/php /var/www/html/artisan firefly-iii:cron"

    - name: 'Firefly III cronjob to clear cache'
      cron:
        name: "Firefly III cronjob to clear cache"
        minute: "0"
        hour: "4"
        job: "/usr/bin/docker exec $(/usr/bin/docker container ls -a -f name=fireflyiii --format={% raw %}'{{.ID}}'{% endraw %}) /usr/local/bin/php /var/www/html/artisan cache:clear"

    - name: 'cron create_daily_note.py'
      cron:
        name: "create daily note in zettelkastedn"
        minute: "0"
        hour: "1"
        job: "/home/connor/code/sysops-scripts/note-automation/create_daily_note.py"

    - name: 'prune dangling links in daily notes'
      cron:
        name: "prune dangling links in daily notes"
        minute: "0"
        hour: "2"
        job: "/home/connor/code/sysops-scripts/note-automation/prune_empty_dn_links.py"


  handlers:
    - name: Restart NFS service
      become: true
      service:
        name: nfs-kernel-server
        state: restarted
